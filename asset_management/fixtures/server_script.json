[
 {
  "allow_guest": 0,
  "api_method": "FromEmployee",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-10-27 17:32:24.028030",
  "module": "Asset Management",
  "name": "FromEmployee",
  "reference_doctype": null,
  "script": "software_id = frappe.form_dict['software_id']\n\n\nAssignedUsers = frappe.db.sql(\"SELECT user,parent FROM `tabSoftware License Users` WHERE parent=%s\",software_id,as_dict=True)\nassigned_users_set = set([row['user'] for row in AssignedUsers])\n\nUsers = frappe.db.sql(\"SELECT name FROM `tabEmployee`\",as_dict=True)\nall_users_set = set([row['name'] for row in Users])\n\nresult = all_users_set.symmetric_difference(assigned_users_set)\n\nresult1 = list(result)\n\nfrappe.response[\"message\"] = result1",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "Userlimitchecker",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-10-27 17:32:24.014442",
  "module": "Asset Management",
  "name": "Fetching_User_Access",
  "reference_doctype": null,
  "script": "useraccess = frappe.db.sql(\"SELECT software_id from `tabSoftware License` WHERE user_access>0\",as_dict = True)\n\nfrappe.response[\"message\"] = useraccess",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "software_id related to software assignment",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-10-27 17:32:24.000649",
  "module": "Asset Management",
  "name": "software_id related to software assignment",
  "reference_doctype": null,
  "script": "software_assignment = frappe.form_dict['software_assignment']\n\nsoftware_id = frappe.db.sql(\"SELECT sli.software_id FROM `tabSoftware Assignment` sa INNER JOIN `tabSoftware License Item` sli ON sli.parent = sa.name WHERE sa.name=%s\", software_assignment,as_dict=True)\n\nfrappe.response[\"message\"] = software_id",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "Invoices",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-10-27 17:32:23.982084",
  "module": "Asset Management",
  "name": "Invoices with Software_ID",
  "reference_doctype": null,
  "script": "software_code = frappe.form_dict['software_code']\n\ninvoices = frappe.db.sql(\"SELECT pi.name FROM `tabPurchase Invoice` pi INNER JOIN `tabPurchase Invoice Item` pii ON pi.name = pii.parent WHERE pii.item_code = %s\", software_code, as_dict=True)\n\nfrappe.response[\"message\"] = invoices",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_all_employee_names",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-10-27 17:32:23.961415",
  "module": "Asset Management",
  "name": "FetchingALLEmployees",
  "reference_doctype": null,
  "script": "employee_names = [employee.name for employee in frappe.get_all('Employee', fields=['name'])]\nfrappe.response[\"message\"] = employee_names",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "SetDates",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-10-27 17:32:23.945821",
  "module": "Asset Management",
  "name": "SetDates",
  "reference_doctype": null,
  "script": "start_date = frappe.form_dict['start_date']\nend_date = frappe.form_dict['end_date']\nsoftware_id = frappe.form_dict['software_id']\n\n\nfrappe.db.set_value(\"Software License\", software_id, 'start_date', start_date)\nfrappe.db.set_value(\"Software License\", software_id, 'end_date', end_date)",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2023-10-27 17:32:23.924512",
  "module": "Asset Management",
  "name": "Software ID from name",
  "reference_doctype": "Software License",
  "script": "if not doc.software_id:\n    frappe.db.set_value('Software License', doc.name, 'software_id', doc.name)\nif not doc.total_access:\n    frappe.db.set_value('Software License', doc.name, 'total_access', doc.user_access)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "TotalAssign2",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-25 12:14:07.283860",
  "module": "Asset Management",
  "name": "TotalAssign2",
  "reference_doctype": null,
  "script": "SoftwareID = frappe.form_dict['software_id']\n\nTotalAssigned = frappe.db.sql(\n    \"SELECT software_id, to_employee FROM `tabSoftware License Item` \" \n    \"WHERE software_id = %s AND enable = 1 AND \"\n    \"((from_employee IS NOT NULL AND to_employee IS NOT NULL) OR (from_employee IS NULL AND to_employee IS NOT NULL))\",\n    (SoftwareID,),\n    as_dict=True\n)\n\ntotal = len(TotalAssigned)\n\ndoc=frappe.get_doc(\"Software License\",SoftwareID)\n\ndoc.user_access = int(doc.user_access) if doc.user_access is not None else 0\ndoc.user_assigned = int(doc.user_assigned) if doc.user_assigned is not None else 0\ndoc.total_access = int(doc.total_access) if doc.total_access is not None else 0\n\ndoc.user_assigned = doc.user_assigned - total\ndoc.user_access = doc.user_access + total\n\nusers = doc.get('users')\n\nfrom_employee = [row.to_employee for row in TotalAssigned]\n\nfiltered_employee = [row for row in users if row.user not in from_employee]\n\ndoc.set('users',[])\nfor user in filtered_employee:\n    doc.append('users',{\n        'user':user.user\n    })\n# doc.set('users',filtered_employee)\n\ndoc.save()\nfrappe.db.commit()",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "end-date",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-10-27 17:32:23.815185",
  "module": "Asset Management",
  "name": "End_date for invoice",
  "reference_doctype": null,
  "script": "invoice = frappe.form_dict['software_invoice']\n\ndata=frappe.db.sql(\"SELECT c.custom_end_date FROM `tabPurchase Invoice` p INNER JOIN `tabPurchase Invoice Item` c ON p.name=c.parent WHERE p.name=%s\", invoice, as_dict=True)\n\nfrappe.response[\"message\"]=data",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "EmployeeforWithdrawPurpose",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-10-27 17:32:23.792423",
  "module": "Asset Management",
  "name": "For From Employee for Withdraw",
  "reference_doctype": null,
  "script": "software_id = frappe.form_dict['software_id']\n\nAssignedUsers = frappe.db.sql(\"SELECT user FROM `tabSoftware License Users` WHERE parent=%s\",software_id,as_dict=True)\n\nfrappe.response[\"message\"] = AssignedUsers",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "fetch_data_from_user_and_softwares",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-10-27 17:32:23.734490",
  "module": "Asset Management",
  "name": "fetch data form user and software",
  "reference_doctype": null,
  "script": "software_id = frappe.form_dict['name']\n\nAssignedUsers = frappe.db.sql(\"SELECT user,parent FROM `tabSoftware License Users` WHERE parent=%s\",software_id,as_dict=True)\nassigned_users_set = set([row['user'] for row in AssignedUsers])\n    \nUsers = frappe.db.sql(\"SELECT name FROM `tabEmployee`\",as_dict=True)\nall_users_set = set([row['name'] for row in Users])\n\nresult = all_users_set.symmetric_difference(assigned_users_set)\nresult1 = list(result)\nfrappe.response[\"message\"] = result1",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "Filtered Assignments",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-06 13:44:28.905850",
  "module": "Asset Management",
  "name": "Filtered Values for Software Assignment",
  "reference_doctype": null,
  "script": "sql = frappe.db.sql(\"SELECT name FROM `tabSoftware Assignment` WHERE purpose IN ('Assign', 'Re-Assign')\", as_dict=True)\n\nfrappe.response[\"message\"] = sql",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "EnableAssigned",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-25 12:14:07.269624",
  "module": "Asset Management",
  "name": "EnableAssigned",
  "reference_doctype": null,
  "script": "from_employee = frappe.form_dict.get('from_employee')\nto_employee = frappe.form_dict.get('to_employee')\nsoftware_assignment = frappe.form_dict.get('software_assignment')\nsoftware_id = frappe.form_dict.get('software_id')\n\nif from_employee is not None and software_assignment is not None and software_id is not None:\n    SoftwareLicenseItems = frappe.db.sql(\n        \"SELECT name from `tabSoftware License Item` WHERE software_id=%s AND parent=%s AND from_employee=%s\",\n        (software_id, software_assignment, to_employee),\n        as_dict=True\n    )\n\n    for item in SoftwareLicenseItems:\n        record_name = item.get('name')\n        doc = frappe.get_doc(\"Software License Item\", record_name)\n        # Set the 'enable' field to 1 for each identified record\n        doc.enable = 1\n        doc.save()\n        \n    frappe.db.commit()\n\nelse:\n    # Handle missing parameters\n    frappe.msgprint(\"Missing parameters in the request.\")\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "TotalAssign3",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-25 12:14:07.254964",
  "module": "Asset Management",
  "name": "TotalAssign3",
  "reference_doctype": null,
  "script": "software_id = frappe.form_dict['software_id']\nfrom_employee = frappe.form_dict['from_employee']\nto_employee = frappe.form_dict['to_employee']\n\ndoc = frappe.get_doc(\"Software License\",software_id)\n\nindex = None\nfor i,user_row in enumerate(doc.get('users')):\n    if user_row.user == from_employee:\n        index = i\n        break\n\ndoc.get('users').remove(doc.get('users')[index])\n\ndoc.append('users',{\n    'user': to_employee\n})\n\ndoc.save()\nfrappe.db.commit()",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "TotalAssigned",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-25 12:14:07.221917",
  "module": "Asset Management",
  "name": "TotalAssigned",
  "reference_doctype": null,
  "script": "SoftwareID = frappe.form_dict['software_id']\nTotalAssigned = frappe.db.sql(\"SELECT software_id,to_employee from `tabSoftware License Item` WHERE software_id = %s AND from_employee IS NULL AND to_employee IS NOT NULL AND enable=0\", SoftwareID,as_dict = True)\n\ntotal = len(TotalAssigned)\n\ndoc=frappe.get_doc(\"Software License\",SoftwareID)\n# user_table = doc.get('users')\n\ndoc.user_access = int(doc.user_access) if doc.user_access is not None else 0\ndoc.user_assigned = int(doc.user_assigned) if doc.user_assigned is not None else 0\ndoc.total_access = int(doc.total_access) if doc.total_access is not None else 0\n\ndoc.user_assigned= total\ndoc.user_access = doc.total_access - doc.user_assigned\n\ndoc.set('users',[])\n\nfor row in TotalAssigned:\n    doc.append('users',{\n        'user': row.to_employee\n    })\n\ndoc.save()\n# frappe.db.commit()",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "handle_assign",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-25 12:51:13.997308",
  "module": "Asset Management",
  "name": "handle_assign",
  "reference_doctype": null,
  "script": "software_id = frappe.form_dict['software_id']\nto_employee = frappe.form_dict['to_employee']\n\ndoc=frappe.get_doc(\"Software License\",software_id)\n\nusers_table = doc.get('users') or []\n\n# Add a new row to the 'users' table\nusers_table.append({\n    'user': to_employee\n})\n\n# Update the 'users' field in the document\ndoc.set('users', users_table)\n\n# Save the changes to the document\ndoc.save()\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "handle_re_assign",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-25 14:07:30.006334",
  "module": "Asset Management",
  "name": "handle_re_assign",
  "reference_doctype": null,
  "script": "software_id = frappe.form_dict['software_id']\nfrom_employee = frappe.form_dict['from_employee']\nto_employee = frappe.form_dict['to_employee']\n\ndoc = frappe.get_doc(\"Software License\", software_id)\n\nusers_table = doc.get('users') or []\n\n# Remove all occurrences of the 'from_employee' value\nusers_table = [user for user in users_table if user.get('user') != from_employee]\n\n# # Delete the rows with 'from_employee' value\n# for user in users_table:\n#     if user.get('user') == from_employee:\n#         frappe.delete_doc('Software License User', user.get('name'))\n\n# Add a new row with 'to_employee' value\nusers_table.append({'user': to_employee})\n\n# Update the 'users' field in the document\ndoc.set('users', users_table)\n\n# Save the document\ndoc.save()\ndoc.reload()\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "handle_withdraw",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2023-11-25 13:37:07.533479",
  "module": "Asset Management",
  "name": "handle_withdraw",
  "reference_doctype": null,
  "script": "software_id = frappe.form_dict['software_id']\nfrom_employee = frappe.form_dict['from_employee']\n\ndoc = frappe.get_doc(\"Software License\", software_id)\n\nusers_table = doc.get('users') or []\n\n# Find the index of the row with 'from_employee' value\nindex_to_remove = None\nfor i, user in enumerate(users_table):\n    if user.get('user') == from_employee:\n        index_to_remove = i\n        break\n\n# Remove the row if found\nif index_to_remove is not None:\n    users_table.pop(index_to_remove)\n\n    # Update the 'users' field in the document\n    doc.set('users', users_table)\n\n    # Save the changes to the document\n    doc.save()\n\n#     return \"User removed from 'users' table successfully\"\n# else:\n#     return \"User with 'from_employee' not found in 'users' table\"",
  "script_type": "API"
 }
]